name: üîÑ Generate + Ping on XLSX Change

on:
  push:
    branches: [ main ]
    paths:
      - 'templates/*.xlsx'
  workflow_dispatch:  # ‚Üê Enables manual "Run workflow" button

permissions:
  contents: write

jobs:
  generate-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Dependencies
        run: |
          pip install pandas openpyxl PyYAML

      - name: üìÑ Get Changed XLSX Files
        id: get_files
        run: |
          BEFORE_COMMIT=${{ github.event.before }}
          if [[ "$BEFORE_COMMIT" == "0000000000000000000000000000000000000000" ]]; then
            BEFORE_COMMIT=4b825dc642cb6eb9a060e54bf8d69288fbee4904
          fi

          CHANGED_FILES=$(git diff --name-only --diff-filter=AM "$BEFORE_COMMIT" HEAD | grep '^templates/.*\.xlsx$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "‚ö†Ô∏è No .xlsx files detected in templates/"
          else
            echo "‚úÖ Detected changed files:"
            echo "$CHANGED_FILES"
          fi

          echo "changed_xlsx=$CHANGED_FILES" >> $GITHUB_ENV

      - name: üß© Process Each XLSX File
        if: env.changed_xlsx != ''
        run: |
          echo "‚öôÔ∏è Processing detected XLSX files..."
          while IFS= read -r xlsx_file; do
            if [ -n "$xlsx_file" ] && [ -f "$xlsx_file" ]; then
              echo "üìÑ Processing: $xlsx_file"
              python ai-generators/generate_files_from_xlsx.py --input "$xlsx_file"
            else
              echo "‚ùå ERROR: File not found: '$xlsx_file'"
            fi
          done <<< "${{ env.changed_xlsx }}"

      - name: üóÉÔ∏è Ensure Output Directories Exist
        run: |
          mkdir -p schemas/organization
          mkdir -p schemas/services
          mkdir -p schemas/products
          mkdir -p schemas/faqs
          mkdir -p schemas/help-articles
          mkdir -p schemas/reviews
          mkdir -p schemas/locations
          mkdir -p schemas/team
          mkdir -p schemas/awards
          mkdir -p schemas/press
          mkdir -p schemas/case-studies

      - name: üó∫Ô∏è Generate or Update Sitemap
        run: |
          python generate_sitemaps.py
          touch ai-sitemap.xml

      - name: ü§ñ Notify AI Search Engines
        run: |
          SITEMAP_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/ai-sitemap.xml"
          echo "üì° Notifying AI search engines with sitemap: $SITEMAP_URL"

          # Google (powers Gemini)
          echo "‚Üí Notifying Google (Gemini)..."
          curl -s -o /dev/null -w "%{http_code}\n" "http://google.com/ping?sitemap=$SITEMAP_URL" \
            && echo "‚úÖ Success" || echo "‚ùå Failed (workflow continues)"

          # Bing (powers Copilot)
          echo "‚Üí Notifying Bing (Copilot)..."
          curl -s -o /dev/null -w "%{http_code}\n" "http://www.bing.com/ping?sitemap=$SITEMAP_URL" \
            && echo "‚úÖ Success" || echo "‚ùå Failed (workflow continues)"

          # Yandex (powers Alice AI in RU/EU)
          echo "‚Üí Notifying Yandex (Alice)..."
          curl -s -o /dev/null -w "%{http_code}\n" "https://yandex.com/ping?sitemap=$SITEMAP_URL" \
            && echo "‚úÖ Success" || echo "‚ùå Failed (workflow continues)"

          # Internet Archive (feeds AI training datasets)
          echo "‚Üí Archiving sitemap with Wayback Machine..."
          curl -s -o /dev/null -w "%{http_code}\n" "https://web.archive.org/save/$SITEMAP_URL" \
            && echo "‚úÖ Archived" || echo "‚ùå Archive failed (workflow continues)"

          # Log reminders for engines that require manual submission
          echo ""
          echo "üìå MANUAL SUBMISSION REQUIRED (one-time per client):"
          echo "‚Üí Perplexity: https://perplexity.ai/business"
          echo "‚Üí You.com: https://you.com/partners"
          echo "‚Üí Phind: https://phind.com/business"
          echo "‚Üí Exa: https://exa.ai/"
          echo ""
          echo "‚ÑπÔ∏è Common Crawl discovers via robots.txt + sitemap ‚Äî no ping needed."

      - name: üîç Verify Generated Files
        run: |
          echo "üîç VERIFYING OUTPUTS ‚Äî Listing all generated files:"
          echo "=================================================="
          find schemas -type f KATEX_INLINE_OPEN -name "*.json" -o -name "*.yaml" -o -name "*.md" -o -name "*.llm" KATEX_INLINE_CLOSE | sort
          echo ""
          echo "üìÑ ai-sitemap.xml last modified:"
          ls -la ai-sitemap.xml

      - name: ‚öôÔ∏è Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: üíæ Commit and Push Changes
        run: |
          git add --all
          git status --short
          git commit -m "ü§ñ Auto-update schemas + sitemap [$(date +'%Y-%m-%d %H:%M:%S')]" || echo "‚úÖ No changes ‚Äî still pushing"
          git push origin ${{ github.ref_name }}

      - name: ‚úÖ Verify Push Success
        run: |
          git fetch origin ${{ github.ref_name }}
          git log -1 origin/${{ github.ref_name }} --oneline
          echo "‚úÖ SUCCESS ‚Äî latest commit matches."
